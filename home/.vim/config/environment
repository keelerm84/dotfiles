" General {{{
set t_ut=  " Force vim to use the background color for the whole line

if has('termguicolors')
    set termguicolors
endif

set background=dark
let g:gruvbox_contrast_dark='soft'
colorscheme gruvbox

filetype plugin indent on
highlight clear SignColumn

" Enable modeline overrides (i.e. # vim: set sw=2)
set modeline

syntax on
set mousehide
scriptencoding utf-8

if has ('x') && has ('gui') " On Linux use + register for copy-paste
  set clipboard=unnamedplus
elseif has ('gui')          " On mac and Windows, use * register for copy-paste
  set clipboard=unnamed
endif

set cursorline
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000
set hidden
set spell

if filereadable("/usr/share/dict/words")
    set dictionary+="/usr/share/dict/words"
endif
set complete+=k

set splitbelow
set splitright

set backup
set backupcopy=yes
set undofile
set undolevels=1000
set undoreload=10000

set showmode
set lazyredraw

set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set showcmd

set ttimeoutlen=0
set timeoutlen=500
set completeopt=menu,preview,longest

set tags=./tags;/,~/.vimtags

let g:UltiSnipsSnippetsDir = expand('$HOME', 1) . '/.vim/'
let g:UltiSnipsSnippetDirectories=["snips"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

autocmd FileType * silent! setlocal formatoptions+=j

let g:SimpylFold_docstring_preview = 1

" Always open the quickfix window after running any sort of grep command
autocmd QuickFixCmdPost *grep* cwindow

hi Normal ctermbg=none
" }}}

" UI {{{
let g:tabber_divider_style = 'unicode'
set tabline=%!tabber#TabLine()

set laststatus=2
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#enabled = 0

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'
" }}}

" Formatting {{{
set nowrap                      " Wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
" }}}

" General Programming {{{
let g:syntastic_always_populate_loc_list = 1
autocmd FileType yml set ft=yaml ts=2 sw=2 smarttab:
autocmd Syntax * syntax keyword Todo contained WARN NOTE FIXME XXX TODO ATTN containedin=.*Comment
" }}}

" Git {{{
autocmd BufNewFile,BufRead fugitive://* set bufhidden=delete
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" }}}

" Python {{{
let python_highlight_all=1
let g:jedi#use_tabs_not_buffers = 1
" }}}

" PHP {{{
" PIV I don't want the vim markers added to the generated documentation
let g:pdv_cfg_foldmarker = 0
let g:php_manual_online_search_shortcut = '<leader>K'

autocmd FileType php set tabstop=4|set shiftwidth=4 foldlevel=1
autocmd FileType php set commentstring=//\ %s
" }}}

" Ruby {{{
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" }}}

" Go {{{
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>e <Plug>(go-rename)
autocmd FileType go nmap <leader>i <Plug>(go-implements)
autocmd FileType go nmap <leader>l :GoLint<CR>
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>c <Plug>(go-coverage)
autocmd FileType go nmap <leader>gv <Plug>(go-vet)
autocmd FileType go nmap <leader>gd <Plug>(go-doc)
autocmd FileType go let b:noStripWhitespace=1
autocmd FileType qf let b:noStripWhitespace=1
" }}}

" SQL {{{
" SQLUtil requires Align, but I don't want it to conflict with tabularize
let g:loaded_AlignMapsPlugin = 0
let g:sqlutil_keyword_case = '\U'

autocmd FileType sql,mysql set commentstring=--\ %s
autocmd FileType mysql let b:noClosePreview=1
autocmd FileType * autocmd CursorMovedI,InsertLeave * call ClosePreviewWindow()
" }}}

" HTML / CSS / JS / XML {{{
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
" }}}

" Markdown {{{
let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'sql', 'xml', 'php']
autocmd FileType markdown setlocal omnifunc=htmlcomplete#CompleteTags
" }}}

" C# {{{
let g:OmniSharp_timeout = 5

augroup omnisharp_commands
    autocmd!

    " When Syntastic is available but not ALE, automatic syntax check on events
    " (TextChanged requires Vim 7.4)
    " autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

    " Show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    " Finds members in the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
    autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>


    " Navigate up and down by method/property/field
    " autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>
    " autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>
augroup END

nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>
xnoremap <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>
nnoremap <Leader>nm :OmniSharpRename<CR>
nnoremap <F2> :OmniSharpRename<CR>
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")
nnoremap <Leader>cf :OmniSharpCodeFormat<CR>
nnoremap <Leader>th :OmniSharpHighlightTypes<CR>
" }}}

" Remove trailing whitespaces and ^M chars {{{
autocmd FileType * autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd FileType markdown let b:noStripWhitespace=1
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
autocmd BufNewFile,BufRead *.rt set filetype=javascript.jsx
autocmd BufNewFile,BufRead *.ts set filetype=javascript.jsx
autocmd BufNewFile,BufRead *.tsx set filetype=javascript.jsx
" }}}

" vim: ft=vim foldlevel=0 foldmethod=marker

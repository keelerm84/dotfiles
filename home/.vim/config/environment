" vim: set filetype=vim:
" General
set t_Co=256
set t_ut=  " Force vim to use the background color for the whole line
set background=dark
colorscheme gruvbox

syntax on
set mousehide
scriptencoding utf-8

if has ('x') && has ('gui') " On Linux use + register for copy-paste
  set clipboard=unnamedplus
elseif has ('gui')          " On mac and Windows, use * register for copy-paste
  set clipboard=unnamed
endif

set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000
set nospell
set hidden

set splitbelow
set splitright

set backup
set undofile
set undolevels=1000
set undoreload=10000

set showmode
set lazyredraw

set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set showcmd

let g:tabber_divider_style = 'unicode'
set tabline=%!tabber#TabLine()

set laststatus=2

set ttimeoutlen=0
set timeoutlen=500

" UI
set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'

" Formatting
set nowrap                      " Wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)

" General Programming
let g:syntastic_always_populate_loc_list = 1

" SQLUtil requires Align, but I don't want it to conflict with tabularize
let g:loaded_AlignMapsPlugin = 0
let g:sqlutil_keyword_case = '\U'

autocmd FileType sql,mysql set commentstring=--\ %s

let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'php']

" PIV
" I don't want the vim markers added to the generated documentation
let g:pdv_cfg_foldmarker = 0

" Remove trailing whitespaces and ^M chars
autocmd FileType * autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd FileType markdown let b:noStripWhitespace=1
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
autocmd BufNewFile,BufRead *.rt set filetype=javascript.jsx

autocmd FileType mail,gitcommit set spell

autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>e <Plug>(go-rename)
autocmd FileType go nmap <leader>i <Plug>(go-implements)
autocmd FileType go nmap <leader>l :GoLint<CR>
autocmd FileType go nmap <leader>t <Plug>(go-test)
autocmd FileType go nmap <leader>c <Plug>(go-coverage)
autocmd FileType go nmap <leader>v <Plug>(go-vet)
autocmd FileType go nmap <leader>gd <Plug>(go-doc)

set tags=./tags;/,~/.vimtags

autocmd BufNewFile,BufRead fugitive://* set bufhidden=delete
autocmd FileType php set tabstop=4|set shiftwidth=4
let g:php_manual_online_search_shortcut = '<leader>K'

autocmd FileType * autocmd CursorMovedI,InsertLeave * call ClosePreviewWindow()
autocmd FileType mysql let b:noClosePreview=1
set completeopt=menu,preview,longest

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
let g:SimpylFold_docstring_preview = 1

autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<

let python_highlight_all=1
let g:jedi#use_tabs_not_buffers = 1

autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType * silent! setlocal formatoptions+=j

" Always open the quickfix window after running any sort of grep command
autocmd QuickFixCmdPost *grep* cwindow
autocmd FileType php set commentstring=//\ %s

au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

hi Normal ctermbg=none
